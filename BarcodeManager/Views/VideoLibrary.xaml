<UserControl x:Class="BarcodeManager.Views.VideoLibrary"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:converter="clr-namespace:BarcodeManager.Converters"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:viewModels="clr-namespace:BarcodeManager.ViewModels"
             mc:Ignorable="d" 
             d:DataContext="{d:DesignInstance viewModels:VideoLibraryViewModel}">
    <UserControl.Resources>
        <converter:BoolToYesNoConverter x:Key="BoolToYesNoConverter" />
    </UserControl.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <DataGrid Margin="0,8,0,0" materialDesign:DataGridAssist.CellPadding="13 8 8 8" materialDesign:DataGridAssist.ColumnHeaderPadding="8" AutoGenerateColumns="False"
                  CanUserAddRows="False" CanUserSortColumns="True" ItemsSource="{Binding Items}">
            <DataGrid.Columns>
                <DataGridCheckBoxColumn Binding="{Binding IsSelected}" EditingElementStyle="{StaticResource MaterialDesignDataGridCheckBoxColumnEditingStyle}" 
                                        ElementStyle="{StaticResource MaterialDesignDataGridCheckBoxColumnStyle}">
                    <!--<DataGridCheckBoxColumn.Header>
                        --><!--  padding to allow hit test to pass thru for sorting  --><!--
                        <Border Padding="6,0,6,0" HorizontalAlignment="Center" Background="Transparent"> 
                            <CheckBox HorizontalAlignment="Center" DataContext="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=DataContext}" 
                                        IsChecked="{Binding IsAllItemsSelected}" />
                        </Border>
                    </DataGridCheckBoxColumn.Header>-->
                </DataGridCheckBoxColumn>
                <!--<DataGridTextColumn Binding="{Binding Code}" EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnEditingStyle}" Header="Code" />-->
                <!--  if you want to use the pop up style (MaterialDesignDataGridTextColumnPopupEditingStyle), you must use MaterialDataGridTextColumn  -->
                <materialDesign:MaterialDataGridTextColumn Binding="{Binding Processed.Config.FileName}" EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnPopupEditingStyle}" Header="Name" />
                <!--  set a max length to get an indicator in the editor  -->
                <materialDesign:MaterialDataGridTextColumn Binding="{Binding Processed.Config.Duration}" EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnPopupEditingStyle}" Header="Duration" />

                <materialDesign:MaterialDataGridTextColumn Binding="{Binding StandardBarcodeCreated, Converter={StaticResource BoolToYesNoConverter}}" Header="Standard barcode" />

                <materialDesign:MaterialDataGridTextColumn Binding="{Binding OnePixelBarcodeCreated, Converter={StaticResource BoolToYesNoConverter}}" Header="1 pixel barcode" />

                <materialDesign:MaterialDataGridTextColumn Binding="{Binding ProcessedStandardFrameCountInFileSystemMatchesDuration, Converter={StaticResource BoolToYesNoConverter}}" Header="fs std frames ok" />
                <materialDesign:MaterialDataGridTextColumn Binding="{Binding ProcessedOnePixelFrameCountInFileSystemMatchesDuration, Converter={StaticResource BoolToYesNoConverter}}" Header="fs 1px frames ok" />

                <!--<materialDesign:MaterialDataGridTextColumn Binding="{Binding Numeric}" EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnPopupEditingStyle}" Header="Numeric">
                    <DataGridTextColumn.HeaderStyle>
                        <Style BasedOn="{StaticResource MaterialDesignDataGridColumnHeader}" TargetType="{x:Type DataGridColumnHeader}">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                        </Style>
                    </DataGridTextColumn.HeaderStyle>
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </materialDesign:MaterialDataGridTextColumn>-->
                <!--  use custom combo box column to get better combos. Use ItemsSourceBinding as your binding template to be applied to each combo  -->
                <!--<materialDesign:MaterialDataGridComboBoxColumn Header="Food" 
                                                               ItemsSourceBinding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}, Path=DataContext.Foods}" 
                                                               SelectedValueBinding="{Binding Food}" />-->
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</UserControl>